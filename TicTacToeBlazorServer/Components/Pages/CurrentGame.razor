@page "/currentGame"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using System.Text.Json
@using TicTacToeBlazorServer.Components.Shared
@using TicTacToeBlazorServer.Models
@using TicTacToeBlazorServer.Services
@using static TicTacToeBlazorServer.Components.Shared.LobbyBase
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inherits LobbyBaseComponent

@if (currentLobby != null)
{
    <div class="board d-flex flex-column">
        <div class="board-header d-flex justify-content-center">
            <h3 class="text-center">You win</h3>
        </div>
        <div class="board-body d-flex">
            <div class="left-menu">
                <div class="inner-block d-flex flex-column">
                    @if (currentLobby.Creator != null)
                    {
                        <UserMiniProfile Name="@currentLobby.Creator.Name" IsReady="@gameData.IsCreatorReady" />
                    }
                    @if (currentLobby.JoinedPlayer != null)
                    {
                        <UserMiniProfile Name="@currentLobby.JoinedPlayer.Name" IsReady="@gameData.IsJoinedReady" />
                    }
                </div>
            </div>
            <div class="center-menu ">
                <TicTacToeGrid IsGameStarted="gameData.GameLogic.IsGameStarted" PlayersCells="gameData.GameLogic.Board" OnCellClick="OnCellClick" />
            </div>
            <div class="right-menu">
                <div class="inner-block d-flex flex-column">
                    <div class="current-turn-name">
                        @if (gameData.CurrentPlayerTurn != null)
                        {
                            <text>@gameData.CurrentPlayerTurn.Name</text>
                        }
                    </div>
                    <div class="time-left">60</div>
                    <div class="buttons d-flex flex-column">
                        <button type="button" class="bt btn-success" @onclick="@(e => ChangePlayerReadyState())" disabled="@gameData.GameLogic.IsGameStarted">Ready</button>
                        <button type="button" class="bt btn-danger" @onclick="@(e => LeaveGame())">Leave Lobby</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="board-footer">
            <Chat />
        </div>
    </div>
}
else
{
    <h3>No game for you</h3>
}
@code {
    private Lobby? currentLobby;
    private string? idInCookies;
    private GameData gameData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDataFromCookies();
            GetLobbyStateFromService();
            SendLobbyState(currentLobby);
            AskGameData(currentLobby);
        }
    }
    protected override void OnReceiveLobbyState(Lobby lobby)
    {
        if (CheckIfThisLobby(lobby))
            GetLobbyStateFromService();
    }
    protected override void OnReceiveUpdateGameData(string gameData, Lobby lobby)
    {
        if (CheckIfThisLobby(lobby))
        {
            this.gameData = GameData.DeserializeFromJson(gameData);
            SaveGameData().GetAwaiter();
            CheckAndStartGame();
            InvokeStateHasChanged();
        }
    }
    protected override void OnReceiveAskGameData(Lobby lobby)
    {
        if (CheckIfThisLobby(lobby))
            SendGameData(gameData.SerializeToJson(), currentLobby);
    }
    private void LeaveGame()
    {
        Player player = LobbyService.GetPlayerById(idInCookies);
        LobbyService.LeaveLobby(currentLobby, player);
        RedirectManager.RedirectTo("/");
        SendLobbyState(currentLobby);
    }
    private void ChangePlayerReadyState()
    {
        if (currentLobby.Creator.Id == idInCookies)
            gameData.IsCreatorReady = !gameData.IsCreatorReady;
        else
            gameData.IsJoinedReady = !gameData.IsJoinedReady;
        CheckAndStartGame();
        SaveGameData().GetAwaiter();
        SendGameData(gameData.SerializeToJson(), currentLobby);
        InvokeStateHasChanged();
    }
    private async Task GetDataFromCookies()
    {
        idInCookies = await JSRuntime.InvokeAsync<string>("getCookie", "UserId");
        string seriazliedGameData = await JSRuntime.InvokeAsync<string>("getCookie", "GameData");
        gameData ??= string.IsNullOrEmpty(seriazliedGameData) ? new GameData() : GameData.DeserializeFromJson(seriazliedGameData);
    }
    private void CheckAndStartGame()
    {
        if (gameData.IsCreatorReady && gameData.IsJoinedReady)
        {
            gameData.CurrentPlayerTurn = currentLobby.Creator;
            gameData.GameLogic.StartGame();
            InvokeStateHasChanged();
        }
    }
    private void OnCellClick(int row, int col)
    {
        if (gameData.CurrentPlayerTurn.Id == idInCookies)
        {
            gameData.GameLogic.MakeMove(row, col);
            gameData.CurrentPlayerTurn = gameData.CurrentPlayerTurn.Id == currentLobby.Creator.Id ? currentLobby.JoinedPlayer : currentLobby.Creator;
            SaveGameData().GetAwaiter();
            SendGameData(gameData.SerializeToJson(), currentLobby);
        }
    }
    private async Task SaveGameData()
    {
        await JSRuntime.InvokeAsync<string>("deleteAndAppendCookie", "GameData", gameData.SerializeToJson());
    }
    private void GetLobbyStateFromService()
    {
        UpdateCurrentLobby(LobbyService.GetLobbyByPlayerId(idInCookies));
    }
    private void UpdateCurrentLobby(Lobby lobby)
    {
        currentLobby = lobby;
        InvokeStateHasChanged();
    }
    private bool CheckIfThisLobby(Lobby lobby)
    {
        if (lobby != null && currentLobby != null)
            return lobby.Id == currentLobby.Id;
        return false;
    }
    private void InvokeStateHasChanged() => InvokeAsync(StateHasChanged);
    public class GameData
    {
        public TicTacToeGameLogic GameLogic { get; set; }
        public bool IsCreatorReady { get; set; }
        public bool IsJoinedReady { get; set; }
        public Player CurrentPlayerTurn { get; set; }

        public GameData()
        {
            GameLogic = new TicTacToeGameLogic();
        }

        public static GameData DeserializeFromJson(string jsonString) => JsonSerializer.Deserialize<GameData>(jsonString);
        public string SerializeToJson() => JsonSerializer.Serialize(this);
    }
}