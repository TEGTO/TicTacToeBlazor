@page "/currentGame"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Json.Serialization
@using TicTacToeBlazorServer.Components.Shared
@using TicTacToeBlazorServer.Models
@using TicTacToeBlazorServer.Services
@using static TicTacToeBlazorServer.Components.Shared.LobbyBase
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inherits LobbyBaseComponent

@if (currentLobby != null)
{
    <div class="board d-flex flex-column">
        <div class="board-header d-flex justify-content-center">
            @if (gameController.LastGameEndState != string.Empty)
            {
                <h3 class="text-center">@gameController.LastGameEndState</h3>
            }
        </div>
        <div class="board-body d-flex">
            <div class="left-menu">
                <div class="inner-block d-flex flex-column">
                    @if (currentLobby.Creator != null)
                    {
                        <UserMiniProfile Name="@currentLobby.Creator.Name" IsReady="@gameController.IsCreatorReady" />
                    }
                    @if (currentLobby.JoinedPlayer != null)
                    {
                        <UserMiniProfile Name="@currentLobby.JoinedPlayer.Name" IsReady="@gameController.IsJoinedReady" />
                    }
                </div>
            </div>
            <div class="center-menu ">
                <TicTacToeGrid PlayersCells="gameController.Board2D" OnCellClick="OnCellClick" />
            </div>
            <div class="right-menu">
                <div class="inner-block d-flex flex-column">
                    <div class="current-turn-name">
                        @if (gameController.CurrentPlayerTurn != null)
                        {
                            <text>@gameController.CurrentPlayerTurn.Name</text>
                        }
                    </div>
                    <div class="time-left">60</div>
                    <div class="buttons d-flex flex-column">
                        <button type="button" class="bt btn-success" @onclick="@(e => ChangePlayerReadyState())" disabled="@gameController.IsGameStarted">Ready</button>
                        <button type="button" class="bt btn-danger" @onclick="@(e => LeaveGame())">Leave Lobby</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="board-footer">
            <Chat />
        </div>
    </div>
}
else
{
    <h3>No game for you</h3>
}
@code {
    private Lobby? currentLobby;
    private string? idInCookies;
    private GameLogicCommand gameController;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDataFromCookies();
            GetLobbyStateFromService();
            AskGameData(currentLobby);
        }
    }
    protected override void OnReceiveLobbyState(Lobby lobby, string gameData)
    {
        if (CheckIfThisLobby(lobby))
        {
            GetLobbyStateFromService();
            if (!string.IsNullOrEmpty(gameData))
            {
                gameController = GameLogicCommand.DeserializeFromJson(gameData);
                SaveGameData().GetAwaiter();
            }
            RestartGameIfNotEnoughPlayers();
            InvokeStateHasChanged();
        }
    }
    private void RestartGameIfNotEnoughPlayers()
    {
        if (currentLobby.Creator == null || currentLobby.JoinedPlayer == null)
            gameController.RestartGame();
    }
    protected override void OnReceiveAskGameData(Lobby lobby)
    {
        if (CheckIfThisLobby(lobby))
        {
            GetLobbyStateFromService();
            SendLobbyState(currentLobby, gameController.SerializeToJson());
        }
    }
    private void LeaveGame()
    {
        Player player = LobbyService.GetPlayerById(idInCookies);
        LobbyService.LeaveLobby(currentLobby, player);
        RedirectManager.RedirectTo("/");
        SendLobbyState(currentLobby, gameController.SerializeToJson());
    }
    private void ChangePlayerReadyState()
    {
        if (currentLobby.Creator.Id == idInCookies)
            gameController.IsCreatorReady = !gameController.IsCreatorReady;
        else
            gameController.IsJoinedReady = !gameController.IsJoinedReady;
        CheckAndStartGame();
        SaveAndSendGameData();
    }
    private async Task GetDataFromCookies()
    {
        idInCookies = await JSRuntime.InvokeAsync<string>("getCookie", "UserId");
        string seriazliedGameData = await JSRuntime.InvokeAsync<string>("getCookie", "GameData");
        gameController ??= string.IsNullOrEmpty(seriazliedGameData) ? new GameLogicCommand() : GameLogicCommand.DeserializeFromJson(seriazliedGameData);
    }
    private void CheckAndStartGame()
    {
        gameController.StartNewGame(currentLobby.Creator);
        InvokeStateHasChanged();
    }
    private void OnCellClick(int row, int col)
    {
        gameController.OnMove(row, col, idInCookies, currentLobby);
        SaveAndSendGameData();
        InvokeStateHasChanged();
    }
    private void GetLobbyStateFromService()
    {
        UpdateCurrentLobby(LobbyService.GetLobbyByPlayerId(idInCookies));
    }
    private void UpdateCurrentLobby(Lobby lobby)
    {
        currentLobby = lobby;
        InvokeStateHasChanged();
    }
    private bool CheckIfThisLobby(Lobby lobby)
    {
        if (lobby != null && currentLobby != null)
            return lobby.Id == currentLobby.Id;
        return false;
    }
    private async void SaveAndSendGameData()
    {
        await SaveGameData();
        InvokeStateHasChanged();
        SendLobbyState(currentLobby, gameController.SerializeToJson());
    }
    private async Task SaveGameData()
    {
        await JSRuntime.InvokeAsync<string>("deleteAndAppendCookie", "GameData", gameController.SerializeToJson());
    }
    private void InvokeStateHasChanged() => InvokeAsync(StateHasChanged);
}