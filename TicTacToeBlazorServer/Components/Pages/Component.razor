@page "/timer"
@using System.Threading.Tasks
@using TicTacToeBlazorServer.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<button @onclick="StartTimer">Start Timer</button>
<h3>Time Left: @remainingTime</h3>

@code {
    private TimeSpan remainingTime;
    private bool isRunning;

    [Inject]
    private ITimerService TimerService { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }
    private void StartTimer()
    {
        TimerService.StopTimerAsync().GetAwaiter();
        TimerService.StartTimerAsync(TimeSpan.FromSeconds(10)).GetAwaiter();
        StateHasChanged();
    }
    private void HandleTimerElapsed()
    {
        remainingTime = TimeSpan.FromSeconds(0);
        StateHasChanged();
    }
    private async Task UpdateRemainingTime()
    {
        remainingTime = TimeSpan.FromMilliseconds(await TimerService.RemainingTimeMillisecondsAsync());
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        while (await TimerService.IsRunningAsync())
        {
            isRunning = true;
            await UpdateRemainingTime();
            await Task.Delay(1000);
        }
        StateHasChanged();
        isRunning = false;
    }
}
